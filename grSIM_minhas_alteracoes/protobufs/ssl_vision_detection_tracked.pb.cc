// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_vision_detection_tracked.proto

#include "ssl_vision_detection_tracked.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ssl_5fgc_5fcommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RobotId;
}  // namespace protobuf_ssl_5fgc_5fcommon_2eproto
namespace protobuf_ssl_5fgc_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector2;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_ssl_5fgc_5fgeometry_2eproto
namespace protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrackedBall;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrackedRobot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_KickedBall;
}  // namespace protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto
class TrackedBallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrackedBall>
      _instance;
} _TrackedBall_default_instance_;
class KickedBallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KickedBall>
      _instance;
} _KickedBall_default_instance_;
class TrackedRobotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrackedRobot>
      _instance;
} _TrackedRobot_default_instance_;
class TrackedFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrackedFrame>
      _instance;
} _TrackedFrame_default_instance_;
namespace protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto {
static void InitDefaultsTrackedBall() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TrackedBall_default_instance_;
    new (ptr) ::TrackedBall();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TrackedBall::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrackedBall =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrackedBall}, {
      &protobuf_ssl_5fgc_5fgeometry_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsKickedBall() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KickedBall_default_instance_;
    new (ptr) ::KickedBall();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KickedBall::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_KickedBall =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsKickedBall}, {
      &protobuf_ssl_5fgc_5fgeometry_2eproto::scc_info_Vector2.base,
      &protobuf_ssl_5fgc_5fgeometry_2eproto::scc_info_Vector3.base,
      &protobuf_ssl_5fgc_5fcommon_2eproto::scc_info_RobotId.base,}};

static void InitDefaultsTrackedRobot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TrackedRobot_default_instance_;
    new (ptr) ::TrackedRobot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TrackedRobot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrackedRobot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrackedRobot}, {
      &protobuf_ssl_5fgc_5fcommon_2eproto::scc_info_RobotId.base,
      &protobuf_ssl_5fgc_5fgeometry_2eproto::scc_info_Vector2.base,}};

static void InitDefaultsTrackedFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TrackedFrame_default_instance_;
    new (ptr) ::TrackedFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TrackedFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TrackedFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTrackedFrame}, {
      &protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::scc_info_TrackedBall.base,
      &protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::scc_info_TrackedRobot.base,
      &protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::scc_info_KickedBall.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TrackedBall.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KickedBall.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrackedRobot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrackedFrame.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedBall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedBall, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedBall, vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedBall, visibility_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KickedBall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KickedBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KickedBall, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KickedBall, vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KickedBall, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KickedBall, stop_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KickedBall, stop_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KickedBall, robot_id_),
  0,
  1,
  4,
  5,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedRobot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedRobot, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedRobot, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedRobot, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedRobot, vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedRobot, vel_angular_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedRobot, visibility_),
  0,
  1,
  3,
  2,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedFrame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedFrame, frame_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedFrame, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedFrame, balls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedFrame, robots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedFrame, kicked_ball_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrackedFrame, capabilities_),
  2,
  1,
  ~0u,
  ~0u,
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::TrackedBall)},
  { 11, 22, sizeof(::KickedBall)},
  { 28, 39, sizeof(::TrackedRobot)},
  { 45, 56, sizeof(::TrackedFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TrackedBall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_KickedBall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TrackedRobot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TrackedFrame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ssl_vision_detection_tracked.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\"ssl_vision_detection_tracked.proto\032\023ss"
      "l_gc_common.proto\032\025ssl_gc_geometry.proto"
      "\"O\n\013TrackedBall\022\025\n\003pos\030\001 \002(\0132\010.Vector3\022\025"
      "\n\003vel\030\002 \001(\0132\010.Vector3\022\022\n\nvisibility\030\003 \001("
      "\002\"\243\001\n\nKickedBall\022\025\n\003pos\030\001 \002(\0132\010.Vector2\022"
      "\025\n\003vel\030\002 \002(\0132\010.Vector3\022\027\n\017start_timestam"
      "p\030\003 \002(\001\022\026\n\016stop_timestamp\030\004 \001(\001\022\032\n\010stop_"
      "pos\030\005 \001(\0132\010.Vector2\022\032\n\010robot_id\030\006 \001(\0132\010."
      "RobotId\"\226\001\n\014TrackedRobot\022\032\n\010robot_id\030\001 \002"
      "(\0132\010.RobotId\022\025\n\003pos\030\002 \002(\0132\010.Vector2\022\023\n\013o"
      "rientation\030\003 \002(\002\022\025\n\003vel\030\004 \001(\0132\010.Vector2\022"
      "\023\n\013vel_angular\030\005 \001(\002\022\022\n\nvisibility\030\006 \001(\002"
      "\"\270\001\n\014TrackedFrame\022\024\n\014frame_number\030\001 \002(\r\022"
      "\021\n\ttimestamp\030\002 \002(\001\022\033\n\005balls\030\003 \003(\0132\014.Trac"
      "kedBall\022\035\n\006robots\030\004 \003(\0132\r.TrackedRobot\022 "
      "\n\013kicked_ball\030\005 \001(\0132\013.KickedBall\022!\n\014capa"
      "bilities\030\006 \003(\0162\013.Capability*\222\001\n\nCapabili"
      "ty\022\026\n\022CAPABILITY_UNKNOWN\020\000\022\"\n\036CAPABILITY"
      "_DETECT_FLYING_BALLS\020\001\022$\n CAPABILITY_DET"
      "ECT_MULTIPLE_BALLS\020\002\022\"\n\036CAPABILITY_DETEC"
      "T_KICKED_BALLS\020\003BAZ\?github.com/RoboCup-S"
      "SL/ssl-game-controller/internal/app/trac"
      "ker"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 883);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_vision_detection_tracked.proto", &protobuf_RegisterTypes);
  ::protobuf_ssl_5fgc_5fcommon_2eproto::AddDescriptors();
  ::protobuf_ssl_5fgc_5fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto
const ::google::protobuf::EnumDescriptor* Capability_descriptor() {
  protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::file_level_enum_descriptors[0];
}
bool Capability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TrackedBall::InitAsDefaultInstance() {
  ::_TrackedBall_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Vector3*>(
      ::Vector3::internal_default_instance());
  ::_TrackedBall_default_instance_._instance.get_mutable()->vel_ = const_cast< ::Vector3*>(
      ::Vector3::internal_default_instance());
}
void TrackedBall::clear_pos() {
  if (pos_ != NULL) pos_->Clear();
  clear_has_pos();
}
void TrackedBall::clear_vel() {
  if (vel_ != NULL) vel_->Clear();
  clear_has_vel();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackedBall::kPosFieldNumber;
const int TrackedBall::kVelFieldNumber;
const int TrackedBall::kVisibilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackedBall::TrackedBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::scc_info_TrackedBall.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrackedBall)
}
TrackedBall::TrackedBall(const TrackedBall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::Vector3(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_vel()) {
    vel_ = new ::Vector3(*from.vel_);
  } else {
    vel_ = NULL;
  }
  visibility_ = from.visibility_;
  // @@protoc_insertion_point(copy_constructor:TrackedBall)
}

void TrackedBall::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(visibility_));
}

TrackedBall::~TrackedBall() {
  // @@protoc_insertion_point(destructor:TrackedBall)
  SharedDtor();
}

void TrackedBall::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
}

void TrackedBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrackedBall::descriptor() {
  ::protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackedBall& TrackedBall::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::scc_info_TrackedBall.base);
  return *internal_default_instance();
}


void TrackedBall::Clear() {
// @@protoc_insertion_point(message_clear_start:TrackedBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vel_ != NULL);
      vel_->Clear();
    }
  }
  visibility_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrackedBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrackedBall)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Vector3 pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Vector3 vel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float visibility = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_visibility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &visibility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrackedBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrackedBall)
  return false;
#undef DO_
}

void TrackedBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrackedBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Vector3 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pos(), output);
  }

  // optional .Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_vel(), output);
  }

  // optional float visibility = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->visibility(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrackedBall)
}

::google::protobuf::uint8* TrackedBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TrackedBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Vector3 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pos(), deterministic, target);
  }

  // optional .Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_vel(), deterministic, target);
  }

  // optional float visibility = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->visibility(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrackedBall)
  return target;
}

size_t TrackedBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrackedBall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Vector3 pos = 1;
  if (has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .Vector3 vel = 2;
    if (has_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vel_);
    }

    // optional float visibility = 3;
    if (has_visibility()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrackedBall)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackedBall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackedBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrackedBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrackedBall)
    MergeFrom(*source);
  }
}

void TrackedBall::MergeFrom(const TrackedBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrackedBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::Vector3::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vel()->::Vector3::MergeFrom(from.vel());
    }
    if (cached_has_bits & 0x00000004u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackedBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrackedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedBall::CopyFrom(const TrackedBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrackedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_vel()) {
    if (!this->vel_->IsInitialized()) return false;
  }
  return true;
}

void TrackedBall::Swap(TrackedBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackedBall::InternalSwap(TrackedBall* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(vel_, other->vel_);
  swap(visibility_, other->visibility_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrackedBall::GetMetadata() const {
  protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KickedBall::InitAsDefaultInstance() {
  ::_KickedBall_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_KickedBall_default_instance_._instance.get_mutable()->vel_ = const_cast< ::Vector3*>(
      ::Vector3::internal_default_instance());
  ::_KickedBall_default_instance_._instance.get_mutable()->stop_pos_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_KickedBall_default_instance_._instance.get_mutable()->robot_id_ = const_cast< ::RobotId*>(
      ::RobotId::internal_default_instance());
}
void KickedBall::clear_pos() {
  if (pos_ != NULL) pos_->Clear();
  clear_has_pos();
}
void KickedBall::clear_vel() {
  if (vel_ != NULL) vel_->Clear();
  clear_has_vel();
}
void KickedBall::clear_stop_pos() {
  if (stop_pos_ != NULL) stop_pos_->Clear();
  clear_has_stop_pos();
}
void KickedBall::clear_robot_id() {
  if (robot_id_ != NULL) robot_id_->Clear();
  clear_has_robot_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickedBall::kPosFieldNumber;
const int KickedBall::kVelFieldNumber;
const int KickedBall::kStartTimestampFieldNumber;
const int KickedBall::kStopTimestampFieldNumber;
const int KickedBall::kStopPosFieldNumber;
const int KickedBall::kRobotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickedBall::KickedBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::scc_info_KickedBall.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KickedBall)
}
KickedBall::KickedBall(const KickedBall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::Vector2(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_vel()) {
    vel_ = new ::Vector3(*from.vel_);
  } else {
    vel_ = NULL;
  }
  if (from.has_stop_pos()) {
    stop_pos_ = new ::Vector2(*from.stop_pos_);
  } else {
    stop_pos_ = NULL;
  }
  if (from.has_robot_id()) {
    robot_id_ = new ::RobotId(*from.robot_id_);
  } else {
    robot_id_ = NULL;
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(stop_timestamp_));
  // @@protoc_insertion_point(copy_constructor:KickedBall)
}

void KickedBall::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_timestamp_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(stop_timestamp_));
}

KickedBall::~KickedBall() {
  // @@protoc_insertion_point(destructor:KickedBall)
  SharedDtor();
}

void KickedBall::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
  if (this != internal_default_instance()) delete stop_pos_;
  if (this != internal_default_instance()) delete robot_id_;
}

void KickedBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KickedBall::descriptor() {
  ::protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KickedBall& KickedBall::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::scc_info_KickedBall.base);
  return *internal_default_instance();
}


void KickedBall::Clear() {
// @@protoc_insertion_point(message_clear_start:KickedBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vel_ != NULL);
      vel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stop_pos_ != NULL);
      stop_pos_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(robot_id_ != NULL);
      robot_id_->Clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stop_timestamp_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(stop_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KickedBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KickedBall)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Vector2 pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Vector3 vel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double start_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_start_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_stop_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Vector2 stop_pos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RobotId robot_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KickedBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KickedBall)
  return false;
#undef DO_
}

void KickedBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KickedBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Vector2 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pos(), output);
  }

  // required .Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_vel(), output);
  }

  // required double start_timestamp = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->start_timestamp(), output);
  }

  // optional double stop_timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stop_timestamp(), output);
  }

  // optional .Vector2 stop_pos = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_stop_pos(), output);
  }

  // optional .RobotId robot_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_robot_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KickedBall)
}

::google::protobuf::uint8* KickedBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KickedBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Vector2 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pos(), deterministic, target);
  }

  // required .Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_vel(), deterministic, target);
  }

  // required double start_timestamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->start_timestamp(), target);
  }

  // optional double stop_timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stop_timestamp(), target);
  }

  // optional .Vector2 stop_pos = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_stop_pos(), deterministic, target);
  }

  // optional .RobotId robot_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_robot_id(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KickedBall)
  return target;
}

size_t KickedBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KickedBall)
  size_t total_size = 0;

  if (has_pos()) {
    // required .Vector2 pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (has_vel()) {
    // required .Vector3 vel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vel_);
  }

  if (has_start_timestamp()) {
    // required double start_timestamp = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t KickedBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KickedBall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .Vector2 pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);

    // required .Vector3 vel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vel_);

    // required double start_timestamp = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional .Vector2 stop_pos = 5;
    if (has_stop_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stop_pos_);
    }

    // optional .RobotId robot_id = 6;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *robot_id_);
    }

  }
  // optional double stop_timestamp = 4;
  if (has_stop_timestamp()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickedBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KickedBall)
  GOOGLE_DCHECK_NE(&from, this);
  const KickedBall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KickedBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KickedBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KickedBall)
    MergeFrom(*source);
  }
}

void KickedBall::MergeFrom(const KickedBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KickedBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::Vector2::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vel()->::Vector3::MergeFrom(from.vel());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stop_pos()->::Vector2::MergeFrom(from.stop_pos());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_robot_id()->::RobotId::MergeFrom(from.robot_id());
    }
    if (cached_has_bits & 0x00000010u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      stop_timestamp_ = from.stop_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KickedBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KickedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickedBall::CopyFrom(const KickedBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickedBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_vel()) {
    if (!this->vel_->IsInitialized()) return false;
  }
  if (has_stop_pos()) {
    if (!this->stop_pos_->IsInitialized()) return false;
  }
  return true;
}

void KickedBall::Swap(KickedBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickedBall::InternalSwap(KickedBall* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(vel_, other->vel_);
  swap(stop_pos_, other->stop_pos_);
  swap(robot_id_, other->robot_id_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(stop_timestamp_, other->stop_timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KickedBall::GetMetadata() const {
  protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrackedRobot::InitAsDefaultInstance() {
  ::_TrackedRobot_default_instance_._instance.get_mutable()->robot_id_ = const_cast< ::RobotId*>(
      ::RobotId::internal_default_instance());
  ::_TrackedRobot_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_TrackedRobot_default_instance_._instance.get_mutable()->vel_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
void TrackedRobot::clear_robot_id() {
  if (robot_id_ != NULL) robot_id_->Clear();
  clear_has_robot_id();
}
void TrackedRobot::clear_pos() {
  if (pos_ != NULL) pos_->Clear();
  clear_has_pos();
}
void TrackedRobot::clear_vel() {
  if (vel_ != NULL) vel_->Clear();
  clear_has_vel();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackedRobot::kRobotIdFieldNumber;
const int TrackedRobot::kPosFieldNumber;
const int TrackedRobot::kOrientationFieldNumber;
const int TrackedRobot::kVelFieldNumber;
const int TrackedRobot::kVelAngularFieldNumber;
const int TrackedRobot::kVisibilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackedRobot::TrackedRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::scc_info_TrackedRobot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrackedRobot)
}
TrackedRobot::TrackedRobot(const TrackedRobot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_robot_id()) {
    robot_id_ = new ::RobotId(*from.robot_id_);
  } else {
    robot_id_ = NULL;
  }
  if (from.has_pos()) {
    pos_ = new ::Vector2(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_vel()) {
    vel_ = new ::Vector2(*from.vel_);
  } else {
    vel_ = NULL;
  }
  ::memcpy(&orientation_, &from.orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&orientation_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:TrackedRobot)
}

void TrackedRobot::SharedCtor() {
  ::memset(&robot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&robot_id_)) + sizeof(visibility_));
}

TrackedRobot::~TrackedRobot() {
  // @@protoc_insertion_point(destructor:TrackedRobot)
  SharedDtor();
}

void TrackedRobot::SharedDtor() {
  if (this != internal_default_instance()) delete robot_id_;
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
}

void TrackedRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrackedRobot::descriptor() {
  ::protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackedRobot& TrackedRobot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::scc_info_TrackedRobot.base);
  return *internal_default_instance();
}


void TrackedRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:TrackedRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(robot_id_ != NULL);
      robot_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vel_ != NULL);
      vel_->Clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&orientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visibility_) -
        reinterpret_cast<char*>(&orientation_)) + sizeof(visibility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrackedRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrackedRobot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RobotId robot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Vector2 pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float orientation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Vector2 vel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vel_angular = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_vel_angular();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_angular_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float visibility = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_visibility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &visibility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrackedRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrackedRobot)
  return false;
#undef DO_
}

void TrackedRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrackedRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RobotId robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_robot_id(), output);
  }

  // required .Vector2 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pos(), output);
  }

  // required float orientation = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->orientation(), output);
  }

  // optional .Vector2 vel = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_vel(), output);
  }

  // optional float vel_angular = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->vel_angular(), output);
  }

  // optional float visibility = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->visibility(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrackedRobot)
}

::google::protobuf::uint8* TrackedRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TrackedRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RobotId robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_robot_id(), deterministic, target);
  }

  // required .Vector2 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pos(), deterministic, target);
  }

  // required float orientation = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->orientation(), target);
  }

  // optional .Vector2 vel = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_vel(), deterministic, target);
  }

  // optional float vel_angular = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->vel_angular(), target);
  }

  // optional float visibility = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->visibility(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrackedRobot)
  return target;
}

size_t TrackedRobot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TrackedRobot)
  size_t total_size = 0;

  if (has_robot_id()) {
    // required .RobotId robot_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *robot_id_);
  }

  if (has_pos()) {
    // required .Vector2 pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (has_orientation()) {
    // required float orientation = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t TrackedRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrackedRobot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .RobotId robot_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *robot_id_);

    // required .Vector2 pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);

    // required float orientation = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .Vector2 vel = 4;
  if (has_vel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vel_);
  }

  if (_has_bits_[0 / 32] & 48u) {
    // optional float vel_angular = 5;
    if (has_vel_angular()) {
      total_size += 1 + 4;
    }

    // optional float visibility = 6;
    if (has_visibility()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrackedRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackedRobot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackedRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrackedRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrackedRobot)
    MergeFrom(*source);
  }
}

void TrackedRobot::MergeFrom(const TrackedRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrackedRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_robot_id()->::RobotId::MergeFrom(from.robot_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pos()->::Vector2::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_vel()->::Vector2::MergeFrom(from.vel());
    }
    if (cached_has_bits & 0x00000008u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000010u) {
      vel_angular_ = from.vel_angular_;
    }
    if (cached_has_bits & 0x00000020u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackedRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrackedRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedRobot::CopyFrom(const TrackedRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrackedRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedRobot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_vel()) {
    if (!this->vel_->IsInitialized()) return false;
  }
  return true;
}

void TrackedRobot::Swap(TrackedRobot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackedRobot::InternalSwap(TrackedRobot* other) {
  using std::swap;
  swap(robot_id_, other->robot_id_);
  swap(pos_, other->pos_);
  swap(vel_, other->vel_);
  swap(orientation_, other->orientation_);
  swap(vel_angular_, other->vel_angular_);
  swap(visibility_, other->visibility_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrackedRobot::GetMetadata() const {
  protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrackedFrame::InitAsDefaultInstance() {
  ::_TrackedFrame_default_instance_._instance.get_mutable()->kicked_ball_ = const_cast< ::KickedBall*>(
      ::KickedBall::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackedFrame::kFrameNumberFieldNumber;
const int TrackedFrame::kTimestampFieldNumber;
const int TrackedFrame::kBallsFieldNumber;
const int TrackedFrame::kRobotsFieldNumber;
const int TrackedFrame::kKickedBallFieldNumber;
const int TrackedFrame::kCapabilitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackedFrame::TrackedFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::scc_info_TrackedFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrackedFrame)
}
TrackedFrame::TrackedFrame(const TrackedFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      balls_(from.balls_),
      robots_(from.robots_),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kicked_ball()) {
    kicked_ball_ = new ::KickedBall(*from.kicked_ball_);
  } else {
    kicked_ball_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_number_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(frame_number_));
  // @@protoc_insertion_point(copy_constructor:TrackedFrame)
}

void TrackedFrame::SharedCtor() {
  ::memset(&kicked_ball_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_number_) -
      reinterpret_cast<char*>(&kicked_ball_)) + sizeof(frame_number_));
}

TrackedFrame::~TrackedFrame() {
  // @@protoc_insertion_point(destructor:TrackedFrame)
  SharedDtor();
}

void TrackedFrame::SharedDtor() {
  if (this != internal_default_instance()) delete kicked_ball_;
}

void TrackedFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrackedFrame::descriptor() {
  ::protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackedFrame& TrackedFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::scc_info_TrackedFrame.base);
  return *internal_default_instance();
}


void TrackedFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:TrackedFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balls_.Clear();
  robots_.Clear();
  capabilities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(kicked_ball_ != NULL);
    kicked_ball_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_number_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(frame_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrackedFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrackedFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frame_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_frame_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TrackedBall balls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_balls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TrackedRobot robots = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_robots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .KickedBall kicked_ball = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kicked_ball()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Capability capabilities = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Capability_IsValid(value)) {
            add_capabilities(static_cast< ::Capability >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 6,
                 ::Capability_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_capabilities())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrackedFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrackedFrame)
  return false;
#undef DO_
}

void TrackedFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrackedFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 frame_number = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_number(), output);
  }

  // required double timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // repeated .TrackedBall balls = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->balls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->balls(static_cast<int>(i)),
      output);
  }

  // repeated .TrackedRobot robots = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->robots(static_cast<int>(i)),
      output);
  }

  // optional .KickedBall kicked_ball = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_kicked_ball(), output);
  }

  // repeated .Capability capabilities = 6;
  for (int i = 0, n = this->capabilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->capabilities(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrackedFrame)
}

::google::protobuf::uint8* TrackedFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TrackedFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 frame_number = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_number(), target);
  }

  // required double timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // repeated .TrackedBall balls = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->balls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->balls(static_cast<int>(i)), deterministic, target);
  }

  // repeated .TrackedRobot robots = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->robots(static_cast<int>(i)), deterministic, target);
  }

  // optional .KickedBall kicked_ball = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_kicked_ball(), deterministic, target);
  }

  // repeated .Capability capabilities = 6;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    6, this->capabilities_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrackedFrame)
  return target;
}

size_t TrackedFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TrackedFrame)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required double timestamp = 2;
    total_size += 1 + 8;
  }

  if (has_frame_number()) {
    // required uint32 frame_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_number());
  }

  return total_size;
}
size_t TrackedFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrackedFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required double timestamp = 2;
    total_size += 1 + 8;

    // required uint32 frame_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .TrackedBall balls = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->balls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->balls(static_cast<int>(i)));
    }
  }

  // repeated .TrackedRobot robots = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->robots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->robots(static_cast<int>(i)));
    }
  }

  // repeated .Capability capabilities = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->capabilities_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->capabilities(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .KickedBall kicked_ball = 5;
  if (has_kicked_ball()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kicked_ball_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrackedFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackedFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackedFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrackedFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrackedFrame)
    MergeFrom(*source);
  }
}

void TrackedFrame::MergeFrom(const TrackedFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrackedFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  balls_.MergeFrom(from.balls_);
  robots_.MergeFrom(from.robots_);
  capabilities_.MergeFrom(from.capabilities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_kicked_ball()->::KickedBall::MergeFrom(from.kicked_ball());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_number_ = from.frame_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackedFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrackedFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedFrame::CopyFrom(const TrackedFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrackedFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->balls())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->robots())) return false;
  if (has_kicked_ball()) {
    if (!this->kicked_ball_->IsInitialized()) return false;
  }
  return true;
}

void TrackedFrame::Swap(TrackedFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackedFrame::InternalSwap(TrackedFrame* other) {
  using std::swap;
  CastToBase(&balls_)->InternalSwap(CastToBase(&other->balls_));
  CastToBase(&robots_)->InternalSwap(CastToBase(&other->robots_));
  capabilities_.InternalSwap(&other->capabilities_);
  swap(kicked_ball_, other->kicked_ball_);
  swap(timestamp_, other->timestamp_);
  swap(frame_number_, other->frame_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrackedFrame::GetMetadata() const {
  protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fvision_5fdetection_5ftracked_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TrackedBall* Arena::CreateMaybeMessage< ::TrackedBall >(Arena* arena) {
  return Arena::CreateInternal< ::TrackedBall >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KickedBall* Arena::CreateMaybeMessage< ::KickedBall >(Arena* arena) {
  return Arena::CreateInternal< ::KickedBall >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TrackedRobot* Arena::CreateMaybeMessage< ::TrackedRobot >(Arena* arena) {
  return Arena::CreateInternal< ::TrackedRobot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TrackedFrame* Arena::CreateMaybeMessage< ::TrackedFrame >(Arena* arena) {
  return Arena::CreateInternal< ::TrackedFrame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
